<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADYqKQBENDcAPTAwDj8wMi0+MDIzPjAyMz4wMjM+MDIzPjAyMz4w
        MjM+MDIzPjAyMz4wMjM+MDIzPjAyMz4xMR5CNTQBQTQ0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMigoADEnJhY6LS6oPzEy6T8xMu0/MTLtPzEy7T8x
        Mu0/MTLtPzEy7T8xMu0/MTLtPzEy7T8xMu0/MTLtPzEy0j8xMkZAMTIAOzAwAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxJSYAMSYmSjgsLPg/MTL/PzEy/z8x
        Mv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEyoj8xMAQ/MTEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAlJQAyJiZaNSkq/Dot
        Lv86LS7/Oi0u/zotLv86LS7/Oi0u/zotLv86LS7/Oi0u/zotLv88Li//PzEy/z8xMv8/MTKwPzAvCD8w
        MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMCUlADIm
        Jlo1KSr8Oi0u/zotLv86LS7/Oiwt/zkrLP86LCz/OSws/zosLP85LCz/Oi0u/zwuL/8/MTL/PzEy/z8x
        Mq8/MC8IPzAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAwJSUAMiYmWjgrLPw/MTL/PzEy/z8wMf9EPUD/S05V/0dESf9LTVT/SEZL/0lKUP8/MjP/PzEy/z8x
        Mv8/MTL/PzEyrz8wLwg/MDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADAlJQAyJiZaOCss/D8xMv8/MTL/Pi8v/1Jfav9vpL3/X3+R/22huv9ihZf/aZas/0A0
        Nf8/MTL/PzEy/z8xMv8/MTKvPzAvCD8wMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAMCUlADImJlo4Kyz8PzEy/z8xMv8/MDH/RDw//0pNVP9HREn/SkxT/0dF
        Sv9JSlD/PzIz/z8xMv8/MTL/PzEy/z8xMq8/MC8IPzAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwJSUAMiYmWjgrLPw/MTL/PzEy/z8xMv8/MDH/Pi8w/z8w
        Mf8+LzD/PzAw/z4vMP8/MTL/PzEy/z8xMv8/MTL/PzEyrz8wLwg/MDAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAlJQAyJiZaOCss/D8xMv8/MTL/PzEy/z8x
        Mv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTKvPzAvCD8wMAA0JycANCcnCDUn
        KA49MTYANyosAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMCUlADImJlo4Kyz8PzEy/z8x
        Mv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMq8/MC8INyoqADAm
        JhMzKCiTOi0uuD4xMzZBMDAAOzI0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwJSUAMiYmWjgr
        LPw/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEyr0Ex
        MQcvJicSMyconjktLf0/MTL/PzEy0D8xMjhAMTEAPjEzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAl
        JQAyJiZaOCss/D8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8x
        Mv8/MTKuNCkpGjInKJ45LC39PzEy/z8xMv8/MTL/PzEy0D8xMjdDMDAAOzI0AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAMSUlADElJk81KSn6PjAx/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy/z8x
        Mv8/MTL/PzEy/z0wMbozKCijOSwt/D8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy0D8xMjhAMTEAPjEzAAAA
        AAAAAAAAAAAAAAAAAAAzJygAMicnHTElJr81KSn8OC0u/jgtL/44LS7+OC0u/jgtLv44LS7+OC0u/jgt
        Lv44LS7+OC0u/jcrLPw4LCzpNSoqwTUpKfg+MDH/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTL/PzEy0D8x
        MjdDMDAAOzI0AAAAAAAAAAAAAAAAAEdCQwBjYmMAVFFSSFtYWNtZY3D1V32k+F2Ktfdei7X2Xou19l6L
        tfZei7X2Xou19l6LtfdeirTzSVtyfi4fHDEyJyciMicnrjgrLP4+MDH/PzEy/z8xMv8/MTL/PzEy/z8x
        Mv8/MTL/PzEy0D8xMjhAMTEAPjEzAAAAAAAAAAAAYGFjAFBOUgJkZmiccHJz/3J2eP5smsX2cLf5+HK3
        9v1yt/b9crf2/XK39v1yt/f7crn69nK5+vBzvPtDcrj6ADMnJwAzJyccMiYmrzgrLP4+MTL/PzEy/z8x
        Mv8/MTL/PzEy/z8xMv8/MTL/PzEyzD8xMiI/MTIAAAAAAAAAAABgY2QA////AF1fYH5kZmf8aWxs82l/
        lG5hgaCCaHmJ/W+AkP1vgJD9b4CQ/26EmMNop+ZAaKrtOmir7hFoqu0AOS4uADImJgAzKCgcMicnrjgr
        LP4+MDH/PzEy/z8xMv8/MTL/PzEy/z8xMv8/MTLtPzEyNz8xMgAAAAAAAAAAAAAAAABdYGEAXWBhEVpd
        XllcX2BPYGRnBVtdXGBoaWn+cXJy/3Fycv9xcnL/cXJysnFycAVxcnEAAAAAAAAAAAAAAAAAAAAAADMn
        JwAzJyccMiYmrjgrLP4+MTL/PzEy/z8xMv8/MTL/PzEy8z8xMnY8LzEGPTAxAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABcXl8AXF5fYWdpav5wcnP/cHFy/3Byc/9wcnO0cHJxBXBycgAAAAAAAAAAAAAA
        AAAAAAAAPC8vADEmJgAzKCgcMicnrjgrLP4+MDH/PzEy/z8xMvM+MDJ2PS8wBz4wMQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFteXwBcXl9PXmFh0mRtcOZlcnbwYmZn22FkZJpjZmYFYmVlAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADMnJwAzJyccMicmrjgrLP8+MDLzPzEydz0uMQc+LzEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAX2FjAFlANQZspcBJfMbn2X/L6/J7wN2GXWltFDsG
        AABaYGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC8vADEmJgAzJygcMicnqDgrLH1DMzUHPjAxAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/9/8Aecj0AHLH8IiA1fr/hNn9/4TZ
        /dWE2v0bhNn9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0mJgAyKCgOLyYmCDAn
        JwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHLH+QBxxcoAbcLtmn3R
        9/+E2Pz/hNj85YTY/CeE2PwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGu/
        6gBtwuxidMjx+oPX/P+E2PywhNf7C4TX+wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAcsXuAHDE7hRuwu3Ce8/184XY/EuE2PwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABzyO8Aar7qAG7C7FBwxe6UgNX6Cn/T+QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABzxvAAc8bwBXPF8A50yu8Acb/yAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////gAD//wAA//8AAH//AAB//wAAf/8AAH//AAB//wAAf/8AA
        H//AABn/wAAQ/8AAAH/AAAA/wAAAH8AAAA/gAAAHwADAA+AA4APgA/AD/gP4B/4D/A/+B/4f/wf/P/8H
        ////B////w////+P////n/////////////8=
</value>
  </data>
</root>